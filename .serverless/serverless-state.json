{
  "service": {
    "service": "realworld-lambda",
    "serviceObject": {
      "name": "realworld-lambda"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "environment": {
        "DYNAMODB_NAMESPACE": "dev"
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "SignInLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-signIn"
            }
          },
          "SignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-signUp"
            }
          },
          "GetCurrentUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-getCurrentUser"
            }
          },
          "UpdateCurrentUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-updateCurrentUser"
            }
          },
          "GetProfileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-getProfile"
            }
          },
          "FollowUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-followUser"
            }
          },
          "UnFollowUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-unFollowUser"
            }
          },
          "GetArticlesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-getArticles"
            }
          },
          "GetFeedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-getFeed"
            }
          },
          "GetArticleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-getArticle"
            }
          },
          "CreateArticleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-createArticle"
            }
          },
          "UpdateArticleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-updateArticle"
            }
          },
          "DeleteArticleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-deleteArticle"
            }
          },
          "AddCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-addComment"
            }
          },
          "GetCommentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-getComments"
            }
          },
          "DeleteCommentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-deleteComment"
            }
          },
          "FavoriteArticleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-favoriteArticle"
            }
          },
          "UnFavoriteArticleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-unFavoriteArticle"
            }
          },
          "GetTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/realworld-lambda-dev-getTags"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "realworld-lambda",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/realworld-lambda-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/realworld-lambda-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "realworld-lambda",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SignInLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/users.signIn",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-signIn",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignInLogGroup"
            ]
          },
          "SignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/users.signUp",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-signUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignUpLogGroup"
            ]
          },
          "GetCurrentUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/users.whoAmI",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-getCurrentUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCurrentUserLogGroup"
            ]
          },
          "UpdateCurrentUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/users.updateUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-updateCurrentUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCurrentUserLogGroup"
            ]
          },
          "GetProfileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/profiles.getProfile",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-getProfile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProfileLogGroup"
            ]
          },
          "FollowUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/profiles.followUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-followUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FollowUserLogGroup"
            ]
          },
          "UnFollowUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/profiles.unFollowUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-unFollowUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnFollowUserLogGroup"
            ]
          },
          "GetArticlesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.getArticles",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-getArticles",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetArticlesLogGroup"
            ]
          },
          "GetFeedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.getFeedArticles",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-getFeed",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFeedLogGroup"
            ]
          },
          "GetArticleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.getArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-getArticle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetArticleLogGroup"
            ]
          },
          "CreateArticleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.createArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-createArticle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateArticleLogGroup"
            ]
          },
          "UpdateArticleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.updateArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-updateArticle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateArticleLogGroup"
            ]
          },
          "DeleteArticleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.deleteArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-deleteArticle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteArticleLogGroup"
            ]
          },
          "AddCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.addCommentToArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-addComment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddCommentLogGroup"
            ]
          },
          "GetCommentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.getCommentsFromArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-getComments",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCommentsLogGroup"
            ]
          },
          "DeleteCommentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.deleteComment",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-deleteComment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCommentLogGroup"
            ]
          },
          "FavoriteArticleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.favoriteArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-favoriteArticle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FavoriteArticleLogGroup"
            ]
          },
          "UnFavoriteArticleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.unFavoriteArticle",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-unFavoriteArticle",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UnFavoriteArticleLogGroup"
            ]
          },
          "GetTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z/realworld-lambda.zip"
              },
              "Handler": "src/articles.getTags",
              "Runtime": "nodejs18.x",
              "FunctionName": "realworld-lambda-dev-getTags",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_NAMESPACE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTagsLogGroup"
            ]
          },
          "SignInLambdaVersionEdjMCeVtw0eLgFDC2E5DSV4HVDM6O1p9rSHu6yQCL8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignInLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "SignUpLambdaVersionlePPGfAsWZwSZyFpidW263gvXp8zwfX5xKGcU1voo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignUpLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "GetCurrentUserLambdaVersionPscvD7DUd8b62nBlynrPx3aG8rrJVuXId7mA2eng0Hg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCurrentUserLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "UpdateCurrentUserLambdaVersionQt6i7hDIk5EOjZ388o7XtJ2dHzvmCsHBjJj0DKquPsI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCurrentUserLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "GetProfileLambdaVersiongLHvbxiKWdbMav8ls7OncFaXQFC64h8p0AgvXHKO5I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProfileLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "FollowUserLambdaVersionIDubF7R1KhTxqvVkrQKWHGvQtlxqiD7IzOJ0EgR1mw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FollowUserLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "UnFollowUserLambdaVersionYcsdkVbtqSS4znHCmDetLfL7gkCtdtiEnxXeUReDiE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UnFollowUserLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "GetArticlesLambdaVersion2OAO0odu7Wtv20ijD5UbWmCw7e4wZ87vX1eLq0tVmws": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetArticlesLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "GetFeedLambdaVersionsS5Fw5zvIVDLwYPJO6UGFOFYkKXkQ99XgJE4WAghPA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFeedLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "GetArticleLambdaVersionfjYSwfs7sq52pk7EHnLbEM234ETeSfgY916X2E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetArticleLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "CreateArticleLambdaVersionJbeOyWzOoRSaboSoYYpappls40Scl9IyGT4qLq9LA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateArticleLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "UpdateArticleLambdaVersionKNfUN2RbiZPzqBWszY3yQVLp8og8z12KGPR1IsYcTU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateArticleLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "DeleteArticleLambdaVersionFqOhnhMh5hh2S96v5jbruMRXhwykW7bdDs7sOj1b0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteArticleLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "AddCommentLambdaVersion9mqMlXEzqrq5Vu7YDBcjLndFX5OmEIc6xyIyn5rcY0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddCommentLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "GetCommentsLambdaVersioneRx2TLQFcDPBplLWiaSUtA7umslmC63W3xavofChWU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCommentsLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "DeleteCommentLambdaVersion0xVzScpeASvlmZuushStCTCx5NPZ9MQY5ji7iJVsQcM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCommentLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "FavoriteArticleLambdaVersionlpXkaBVhHx6EgQNBU4PU7bSSmpN08LYI2Kv45YPBa4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FavoriteArticleLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "UnFavoriteArticleLambdaVersionmLDcA8Kz41vyUVzwgHmeUojvJlcko2IS3RoqO3WEU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UnFavoriteArticleLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "GetTagsLambdaVersion8OovDv5WEyl12VHCjqe2vimFYyNjcL1HZsxyGiMo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTagsLambdaFunction"
              },
              "CodeSha256": "Q6HldjeoARUjFRXwz6Kmq4q2aNownWWMloj8b0vd4wA="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-realworld-lambda",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "SignInLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignInLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSignIn": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignInLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiUsersLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/users/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSignIn"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSignIn"
          },
          "SignUpLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignUpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSignUp": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignUpLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSignUp"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSignUp"
          },
          "GetCurrentUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCurrentUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCurrentUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCurrentUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiUser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCurrentUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCurrentUser"
          },
          "UpdateCurrentUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCurrentUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateCurrentUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateCurrentUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiUser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateCurrentUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateCurrentUser"
          },
          "GetProfileLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProfileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetProfile": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetProfileLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiProfilesUsernameVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/profiles/{username}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetProfile"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetProfile"
          },
          "FollowUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FollowUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFollowUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FollowUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiProfilesUsernameVarFollow": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/profiles/{username}/follow",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFollowUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFollowUser"
          },
          "UnFollowUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UnFollowUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUnFollowUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UnFollowUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiProfilesUsernameVarFollow": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/profiles/{username}/follow",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUnFollowUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUnFollowUser"
          },
          "GetArticlesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetArticlesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetArticles": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetArticlesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiArticles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/articles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetArticles"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetArticles"
          },
          "GetFeedLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFeedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFeed": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFeedLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiArticlesFeed": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/articles/feed",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFeed"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFeed"
          },
          "GetArticleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetArticleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetArticle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetArticleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiArticlesSlugVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/articles/{slug}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetArticle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetArticle"
          },
          "CreateArticleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateArticleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateArticle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateArticleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiArticles": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/articles",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateArticle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateArticle"
          },
          "UpdateArticleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateArticleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateArticle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateArticleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutApiArticlesSlugVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/articles/{slug}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateArticle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateArticle"
          },
          "DeleteArticleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteArticleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteArticle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteArticleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiArticlesSlugVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/articles/{slug}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteArticle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteArticle"
          },
          "AddCommentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddComment": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddCommentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiArticlesSlugVarComments": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/articles/{slug}/comments",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddComment"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddComment"
          },
          "GetCommentsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCommentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetComments": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCommentsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiArticlesSlugVarComments": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/articles/{slug}/comments",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetComments"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetComments"
          },
          "DeleteCommentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCommentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteComment": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCommentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiArticlesSlugVarCommentsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/articles/{slug}/comments/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteComment"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteComment"
          },
          "FavoriteArticleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FavoriteArticleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFavoriteArticle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FavoriteArticleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiArticlesSlugVarFavorite": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/articles/{slug}/favorite",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFavoriteArticle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFavoriteArticle"
          },
          "UnFavoriteArticleLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UnFavoriteArticleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUnFavoriteArticle": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UnFavoriteArticleLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiArticlesSlugVarFavorite": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/articles/{slug}/favorite",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUnFavoriteArticle"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUnFavoriteArticle"
          },
          "GetTagsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTags": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTagsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiTags": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/tags",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTags"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTags"
          },
          "UsersDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "username",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "realworld-dev-users",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "email",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-ServerlessDeploymentBucketName"
            }
          },
          "SignInLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignInLambdaVersionEdjMCeVtw0eLgFDC2E5DSV4HVDM6O1p9rSHu6yQCL8"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-SignInLambdaFunctionQualifiedArn"
            }
          },
          "SignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignUpLambdaVersionlePPGfAsWZwSZyFpidW263gvXp8zwfX5xKGcU1voo"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-SignUpLambdaFunctionQualifiedArn"
            }
          },
          "GetCurrentUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCurrentUserLambdaVersionPscvD7DUd8b62nBlynrPx3aG8rrJVuXId7mA2eng0Hg"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-GetCurrentUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCurrentUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCurrentUserLambdaVersionQt6i7hDIk5EOjZ388o7XtJ2dHzvmCsHBjJj0DKquPsI"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-UpdateCurrentUserLambdaFunctionQualifiedArn"
            }
          },
          "GetProfileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProfileLambdaVersiongLHvbxiKWdbMav8ls7OncFaXQFC64h8p0AgvXHKO5I"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-GetProfileLambdaFunctionQualifiedArn"
            }
          },
          "FollowUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FollowUserLambdaVersionIDubF7R1KhTxqvVkrQKWHGvQtlxqiD7IzOJ0EgR1mw"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-FollowUserLambdaFunctionQualifiedArn"
            }
          },
          "UnFollowUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UnFollowUserLambdaVersionYcsdkVbtqSS4znHCmDetLfL7gkCtdtiEnxXeUReDiE"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-UnFollowUserLambdaFunctionQualifiedArn"
            }
          },
          "GetArticlesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetArticlesLambdaVersion2OAO0odu7Wtv20ijD5UbWmCw7e4wZ87vX1eLq0tVmws"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-GetArticlesLambdaFunctionQualifiedArn"
            }
          },
          "GetFeedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFeedLambdaVersionsS5Fw5zvIVDLwYPJO6UGFOFYkKXkQ99XgJE4WAghPA"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-GetFeedLambdaFunctionQualifiedArn"
            }
          },
          "GetArticleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetArticleLambdaVersionfjYSwfs7sq52pk7EHnLbEM234ETeSfgY916X2E"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-GetArticleLambdaFunctionQualifiedArn"
            }
          },
          "CreateArticleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateArticleLambdaVersionJbeOyWzOoRSaboSoYYpappls40Scl9IyGT4qLq9LA"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-CreateArticleLambdaFunctionQualifiedArn"
            }
          },
          "UpdateArticleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateArticleLambdaVersionKNfUN2RbiZPzqBWszY3yQVLp8og8z12KGPR1IsYcTU"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-UpdateArticleLambdaFunctionQualifiedArn"
            }
          },
          "DeleteArticleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteArticleLambdaVersionFqOhnhMh5hh2S96v5jbruMRXhwykW7bdDs7sOj1b0"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-DeleteArticleLambdaFunctionQualifiedArn"
            }
          },
          "AddCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddCommentLambdaVersion9mqMlXEzqrq5Vu7YDBcjLndFX5OmEIc6xyIyn5rcY0"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-AddCommentLambdaFunctionQualifiedArn"
            }
          },
          "GetCommentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCommentsLambdaVersioneRx2TLQFcDPBplLWiaSUtA7umslmC63W3xavofChWU"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-GetCommentsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCommentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCommentLambdaVersion0xVzScpeASvlmZuushStCTCx5NPZ9MQY5ji7iJVsQcM"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-DeleteCommentLambdaFunctionQualifiedArn"
            }
          },
          "FavoriteArticleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FavoriteArticleLambdaVersionlpXkaBVhHx6EgQNBU4PU7bSSmpN08LYI2Kv45YPBa4"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-FavoriteArticleLambdaFunctionQualifiedArn"
            }
          },
          "UnFavoriteArticleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UnFavoriteArticleLambdaVersionmLDcA8Kz41vyUVzwgHmeUojvJlcko2IS3RoqO3WEU"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-UnFavoriteArticleLambdaFunctionQualifiedArn"
            }
          },
          "GetTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTagsLambdaVersion8OovDv5WEyl12VHCjqe2vimFYyNjcL1HZsxyGiMo"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-GetTagsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-realworld-lambda-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-plugin-typescript",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "signIn": {
        "handler": "src/users.signIn",
        "events": [
          {
            "httpApi": {
              "path": "/api/users/login",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/users/login"
          }
        ],
        "name": "realworld-lambda-dev-signIn",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SignInLambdaVersionEdjMCeVtw0eLgFDC2E5DSV4HVDM6O1p9rSHu6yQCL8"
      },
      "signUp": {
        "handler": "src/users.signUp",
        "events": [
          {
            "httpApi": {
              "path": "/api/users",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/users"
          }
        ],
        "name": "realworld-lambda-dev-signUp",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SignUpLambdaVersionlePPGfAsWZwSZyFpidW263gvXp8zwfX5xKGcU1voo"
      },
      "getCurrentUser": {
        "handler": "src/users.whoAmI",
        "events": [
          {
            "httpApi": {
              "path": "/api/user",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/user"
          }
        ],
        "name": "realworld-lambda-dev-getCurrentUser",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetCurrentUserLambdaVersionPscvD7DUd8b62nBlynrPx3aG8rrJVuXId7mA2eng0Hg"
      },
      "updateCurrentUser": {
        "handler": "src/users.updateUser",
        "events": [
          {
            "httpApi": {
              "path": "/api/user",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/user"
          }
        ],
        "name": "realworld-lambda-dev-updateCurrentUser",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateCurrentUserLambdaVersionQt6i7hDIk5EOjZ388o7XtJ2dHzvmCsHBjJj0DKquPsI"
      },
      "getProfile": {
        "handler": "src/profiles.getProfile",
        "events": [
          {
            "httpApi": {
              "path": "/api/profiles/{username}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/profiles/{username}"
          }
        ],
        "name": "realworld-lambda-dev-getProfile",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetProfileLambdaVersiongLHvbxiKWdbMav8ls7OncFaXQFC64h8p0AgvXHKO5I"
      },
      "followUser": {
        "handler": "src/profiles.followUser",
        "events": [
          {
            "httpApi": {
              "path": "/api/profiles/{username}/follow",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/profiles/{username}/follow"
          }
        ],
        "name": "realworld-lambda-dev-followUser",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "FollowUserLambdaVersionIDubF7R1KhTxqvVkrQKWHGvQtlxqiD7IzOJ0EgR1mw"
      },
      "unFollowUser": {
        "handler": "src/profiles.unFollowUser",
        "events": [
          {
            "httpApi": {
              "path": "/api/profiles/{username}/follow",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/profiles/{username}/follow"
          }
        ],
        "name": "realworld-lambda-dev-unFollowUser",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UnFollowUserLambdaVersionYcsdkVbtqSS4znHCmDetLfL7gkCtdtiEnxXeUReDiE"
      },
      "getArticles": {
        "handler": "src/articles.getArticles",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/articles"
          }
        ],
        "name": "realworld-lambda-dev-getArticles",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetArticlesLambdaVersion2OAO0odu7Wtv20ijD5UbWmCw7e4wZ87vX1eLq0tVmws"
      },
      "getFeed": {
        "handler": "src/articles.getFeedArticles",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/feed",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/articles/feed"
          }
        ],
        "name": "realworld-lambda-dev-getFeed",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetFeedLambdaVersionsS5Fw5zvIVDLwYPJO6UGFOFYkKXkQ99XgJE4WAghPA"
      },
      "getArticle": {
        "handler": "src/articles.getArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/articles/{slug}"
          }
        ],
        "name": "realworld-lambda-dev-getArticle",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetArticleLambdaVersionfjYSwfs7sq52pk7EHnLbEM234ETeSfgY916X2E"
      },
      "createArticle": {
        "handler": "src/articles.createArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/articles"
          }
        ],
        "name": "realworld-lambda-dev-createArticle",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateArticleLambdaVersionJbeOyWzOoRSaboSoYYpappls40Scl9IyGT4qLq9LA"
      },
      "updateArticle": {
        "handler": "src/articles.updateArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/articles/{slug}"
          }
        ],
        "name": "realworld-lambda-dev-updateArticle",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateArticleLambdaVersionKNfUN2RbiZPzqBWszY3yQVLp8og8z12KGPR1IsYcTU"
      },
      "deleteArticle": {
        "handler": "src/articles.deleteArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/articles/{slug}"
          }
        ],
        "name": "realworld-lambda-dev-deleteArticle",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteArticleLambdaVersionFqOhnhMh5hh2S96v5jbruMRXhwykW7bdDs7sOj1b0"
      },
      "addComment": {
        "handler": "src/articles.addCommentToArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}/comments",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/articles/{slug}/comments"
          }
        ],
        "name": "realworld-lambda-dev-addComment",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AddCommentLambdaVersion9mqMlXEzqrq5Vu7YDBcjLndFX5OmEIc6xyIyn5rcY0"
      },
      "getComments": {
        "handler": "src/articles.getCommentsFromArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}/comments",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/articles/{slug}/comments"
          }
        ],
        "name": "realworld-lambda-dev-getComments",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetCommentsLambdaVersioneRx2TLQFcDPBplLWiaSUtA7umslmC63W3xavofChWU"
      },
      "deleteComment": {
        "handler": "src/articles.deleteComment",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}/comments/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/articles/{slug}/comments/{id}"
          }
        ],
        "name": "realworld-lambda-dev-deleteComment",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteCommentLambdaVersion0xVzScpeASvlmZuushStCTCx5NPZ9MQY5ji7iJVsQcM"
      },
      "favoriteArticle": {
        "handler": "src/articles.favoriteArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}/favorite",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/articles/{slug}/favorite"
          }
        ],
        "name": "realworld-lambda-dev-favoriteArticle",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "FavoriteArticleLambdaVersionlpXkaBVhHx6EgQNBU4PU7bSSmpN08LYI2Kv45YPBa4"
      },
      "unFavoriteArticle": {
        "handler": "src/articles.unFavoriteArticle",
        "events": [
          {
            "httpApi": {
              "path": "/api/articles/{slug}/favorite",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/articles/{slug}/favorite"
          }
        ],
        "name": "realworld-lambda-dev-unFavoriteArticle",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UnFavoriteArticleLambdaVersionmLDcA8Kz41vyUVzwgHmeUojvJlcko2IS3RoqO3WEU"
      },
      "getTags": {
        "handler": "src/articles.getTags",
        "events": [
          {
            "httpApi": {
              "path": "/api/tags",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/tags"
          }
        ],
        "name": "realworld-lambda-dev-getTags",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTagsLambdaVersion8OovDv5WEyl12VHCjqe2vimFYyNjcL1HZsxyGiMo"
      }
    },
    "resources": {
      "Resources": {
        "UsersDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "username",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "username",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "realworld-dev-users",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "email",
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "realworld-lambda",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/quantranlehai/learn/realworld-lambda/.build/.serverless/realworld-lambda.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/realworld-lambda/dev/1682070485178-2023-04-21T09:48:05.178Z",
    "artifact": "realworld-lambda.zip"
  }
}