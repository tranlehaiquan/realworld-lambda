org: qtran
app: realworld-lambda
service: realworld-lambda
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    JWT_TOKEN_KEY: ${param:jwt}
    DB_HOST: ${param:DB_HOST}
    DB_PORT: ${param:DB_PORT}
    DB_USERNAME: ${param:DB_USERNAME}
    DB_PASSWORD: ${param:DB_PASSWORD}
    DB_DATABASE: ${param:DB_DATABASE}
  stage: development
  region: ap-southeast-1

functions:
  signIn:
    handler: src/users/login.login
    events:
      - httpApi:
          path: /api/users/login
          method: post
  signUp:
    handler: src/users/register.register
    events:
      - httpApi:
          path: /api/users
          method: post
  whoAmI:
    handler: src/users/whoAmI.whoAmI
    events:
      - httpApi:
          path: /api/users/me
          method: post
  updateCurrentUser:
    handler: src/users/updateUser.updateUser
    events:
      - httpApi:
          path: /api/users/me
          method: put
  getListFollowers:
    handler: src/profiles/getListFollowers.getListFollowers
    events:
      - httpApi:
          path: /api/profiles/{username}/followers
          method: get
  getProfile:
    handler: src/profiles/getProfile.getProfile
    events:
      - httpApi:
          path: /api/profiles/{username}
          method: get
  followUser:
    handler: src/profiles/followUser.followUser
    events:
      - httpApi:
          path: /api/profiles/{username}/follow
          method: post
  unFollowUser:
    handler: src/profiles/unFollowUser.unFollowUser
    events:
      - httpApi:
          path: /api/profiles/{username}/follow
          method: delete
  getArticles:
    handler: src/articles/getArticles.getArticles
    events:
      - httpApi:
          path: /api/articles
          method: get
  getFeed:
    handler: src/articles/getFeedArticles.getFeedArticles
    events:
      - httpApi:
          path: /api/articles/feed
          method: get
  getArticleBySlug:
    handler: src/articles/getArticleBySlug.getArticleBySlug
    events:
      - httpApi:
          path: /api/articles/{slug}
          method: get
  createArticle:
    handler: src/articles/createArticle.createArticle
    events:
      - httpApi:
          path: /api/articles
          method: post
  updateArticle:
    handler: src/articles/updateArticle.updateArticle
    events:
      - httpApi:
          path: /api/articles/{slug}
          method: put
  deleteArticle:
    handler: src/articles/deleteArticle.deleteArticle
    events:
      - httpApi:
          path: /api/articles/{slug}
          method: delete
  addComment:
    handler: src/articles/addCommentToArticle.addCommentToArticle
    events:
      - httpApi:
          path: /api/articles/{slug}/comments
          method: post
  getComments:
    handler: src/articles/getCommentsFromArticle.getCommentsFromArticle
    events:
      - httpApi:
          path: /api/articles/{slug}/comments
          method: get
  deleteComment:
    handler: src/articles/deleteComment.deleteComment
    events:
      - httpApi:
          path: /api/articles/comments/{id}
          method: delete
  favoriteArticle:
    handler: src/articles/favoriteArticle.favoriteArticle
    events:
      - httpApi:
          path: /api/articles/{slug}/favorite
          method: post
  unFavoriteArticle:
    handler: src/articles/unFavoriteArticle.unFavoriteArticle
    events:
      - httpApi:
          path: /api/articles/{slug}/favorite
          method: delete
  getTags:
    handler: src/tags.tags
    events:
      - httpApi:
          path: /api/tags
          method: get
  
plugins:
  - serverless-plugin-typescript
  - serverless-offline
